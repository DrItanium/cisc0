LockStepMachine type 0
======================

The LockStepMachine type0 or +lsm0+ is a system consisting of 4 iris20 core and
eight iris16 secondary cores. As the title of the machine states, it is a system
which executes all of its cores in a lock step fashion per "cycle". 

The iris20 core is a 64-bit RISC/CISC cpu with 64 registers and 64 megawords
worth of RAM. Each word in this core is 64-bits signed.  This translate to 512
megabytes worth of ram. Each iris20 word can contain 1 (64-bit molecule) or 2
(32-bit atom) instructions. It will execute 4 instructions before yielding
clock time to the other 4 cores (each of them getting 4 cycles each). 

Communication between these cores is facilitated via memory mapped addresses.
In the case of iris20 the following memory map exists:

.iris20 Memory Map
[options="header,footer"]
|===========================================================================
| Start Address      | End Address (inclusive) | Read/Write   | Description 
| 0x0000000000000000 | 0x0000000003FFFFFF      | Read & Write | iris20 RAM
| 0x0000000004000000 | 0x0000000004003FFF      | Read & Write | iris16 Core 0 Data RAM
| 0x0000000004004000 | 0x0000000004007FFF      | Read & Write | iris16 Core 1 Data RAM
| 0x0000000004008000 | 0x000000000400BFFF      | Read & Write | iris16 Core 2 Data RAM
| 0x000000000400C000 | 0x000000000400FFFF      | Read & Write | iris16 Core 3 Data RAM
| 0x0000000004010000 | 0x0000000004013FFF      | Read & Write | iris16 Core 4 Data RAM
| 0x0000000004014000 | 0x0000000004017FFF      | Read & Write | iris16 Core 5 Data RAM
| 0x0000000004018000 | 0x000000000401BFFF      | Read & Write | iris16 Core 6 Data RAM
| 0x000000000401C000 | 0x000000000401FFFF      | Read & Write | iris16 Core 7 Data RAM
| 0x0000000004010000 | 0x0000000004010000      | Read Only    | iris20 Cycles Per Machine Cycle 
| 0xFFFFFFFFFF000000 | 0xFFFFFFFFFFFFFFFF      | Read & Write | iris20 IO Space 
| 0xFFFFFFFFFF000000 | 0xFFFFFFFFFF000000      | Write        | iris20 Shutdown Core
| 0xFFFFFFFFFF000001 | 0xFFFFFFFFFF000001      | Read         | iris20 Read Character from keyboard
| 0xFFFFFFFFFF000002 | 0xFFFFFFFFFF000002      | Write        | iris20 Print Character to Screen
| 0xFFFFFFFFFF000003 | 0xFFFFFFFFFF000003      | Read         | iris20 RAM Size (End Address + 1)
|===========================================================================


To allow bidirectional communication the iris20 core and iris16 cores have
parts of each other mapped into them. From the perspective of the iris20 core,
each iris16 core has it's data ram mapped into the iris20 memory space. The
iris20 core also dedicates two registers to each secondary core and has these
registers mapped into the specific iris16 core's io space!. To allow the iris16
cores to communicate with each other, two registers are devoted in each core
for each other core. They are mapped in each core in the same layout to
simplify the design. The following tables show how the mappings are laid out.

In the following table, the iris20 register is broken up into four different
parts (mapping a 64-bit register into a 16-bit memory space!). This is done in
a little endian design. In these cases the addresses of these exposed registers
are always the same for the sake of simplicity. It should also be noted that
these registers can still be used internally by the iris20 core. Just be
careful not to cause unintended side effects in the process.

.iris16 views of the iris20 exposed registers in IO space
[options="header,footer"]
|======================================================================
| Core ID | Start Address | End Address (inclusive) | iris20 Register 
| 0 	  | 0x0003        | 0x0006                  | r15
| 0       | 0x0007        | 0x000A                  | r16
| 1 	  | 0x0003        | 0x0006                  | r17
| 1       | 0x0007        | 0x000A                  | r18
| 2 	  | 0x0003        | 0x0006                  | r19
| 2       | 0x0007        | 0x000A                  | r20
| 3 	  | 0x0003        | 0x0006                  | r21
| 3       | 0x0007        | 0x000A                  | r22
| 4 	  | 0x0003        | 0x0006                  | r23
| 4       | 0x0007        | 0x000A                  | r24
| 5 	  | 0x0003        | 0x0006                  | r25
| 5       | 0x0007        | 0x000A                  | r26
| 6 	  | 0x0003        | 0x0006                  | r27
| 6       | 0x0007        | 0x000A                  | r28
| 7 	  | 0x0003        | 0x0006                  | r29
| 7       | 0x0007        | 0x000A                  | r30
|======================================================================

To facilitate communication across the different iris16 cores, some of the
registers of each core is exposed via memory mapping to the other cores. The
mapping is always the same as well regardless of core. If the destination core
is the same as the source core then the operations are the equivalent of
performing a move instruction. The following table details the memory addresses
and corresponding registers. Regardless of which core you are invoking from the
memory map stays the same. This means that each core is aware of its own core
id!

Also, each core has access to two registers of another core. They are always
the same too!


.iris16 core to core mapped registers and addresses
[options="header,footer"]
|========================================
| Core ID | IO Address | Mapped Register
| 0       | 0x000B     | r128
| 0       | 0x000C     | r129
| 1       | 0x000D     | r130
| 1       | 0x000E     | r131
| 2       | 0x000F     | r132
| 2       | 0x0010     | r133
| 3       | 0x0011     | r134
| 3       | 0x0012     | r135
| 4       | 0x0013     | r136
| 4       | 0x0014     | r137
| 5       | 0x0015     | r138
| 5       | 0x0016     | r139
| 6       | 0x0017     | r140
| 6       | 0x0018     | r141
| 7       | 0x0019     | r142
| 7       | 0x001A     | r143
|========================================

Each iris16 core is the same, the only difference is which core it is. For
instance, core 3's r134 and r135 are mapped into its own io memory space at
0x0011 and 0x0012 respectively. This design also allows messages to be passed
from the core to itself. 

Each iris16 core also contains its cycle count and core id in its own io space.

.iris16 core io constants
[options="header,footer"]
|========================================
| IO Address | Description
| 0x001B     | Number of individual cycles per machine cycle
| 0x001C     | Current Core ID 
|========================================


iris20's four cycles per machine cycle
--------------------------------------

Unlike the RISC esque design of iris16, iris20 is a RISC/CISC hybrid. A 64-bit
word in iris20 can have 1 or 2 instructions within it. When this happens it is
possible to perform 8 instructions in four cycles and process commands from the
secondary cores in quick succession. 

Uses for the Different Secondary Cores
--------------------------------------

The +lsm0+ is a constantly evolving machine. The four secondary cores are
complete CPUs that can operate separately from the main iris20 core. Because of
this, each iris16 core can be used for different purposes. However, each iris16
cpu has a different purposes. 
