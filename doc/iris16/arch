The second generation iris core is a 16-bit processor which has 32-bit
instructions.

Some stats:

- 256 general purpose 16-bit registers
- Harvard Design
  - 64k instruction words (code domain)
  - 64k data words (data domain)
  - 64k stack words (stack domain)
  - Instruction words are 32-bits in length
  - Data words are 16-bits in length
  - 64k data words circular stack (can't overflow into external memory but will
    wraparound by design) which grows down (from address zero downward).
- CISC design for compact code representation
   - Relatively simple decoder logic
- Has three unused execution groups for extension purposes

The general format of the instructions are as follows:

bits 0-2 : mode [3 bits]
bits 3-7 : operation [5 bits]
bits 8-31 : operation bits [24 bits]

These 24 bits are usually broken up into three 8-bit pieces or an 8-bit piece
followed by a 16-bit piece. So the following table will describe different
shorthand the rest of this document will use. Each entry will be of the
following form:

[ Bits | uses | terms ]

[ bits 8-15  | register, index | dest, destination register, first register, reg0, index ]
[ bits 16-23 | register, index | source0, src0, first source register, index ]
[ bits 24-31 | register        | source1, src1, second source register ]
[ bits 16-31 | immediate       | immediate ]

It is important to note that immediate values will ALWAYS be in bits 16-31 in
the instructions which require them. The first register space can sometimes go
unused in the case of some instructions. It is also important to note that one
of improvements to iris is this simplification to how bits are used. 

Iris has support for up to eight instruction groups where only five are
actually in use. The five modes are:

0: Arithmetic
1: Move
2: Jump
3: Compare
4: Misc 
5-7: Undefined (will cause a panic in the simulator at this point in time)

The operation bits are different for each major operation group. 

-------------------------------------------------------------------

For arithmetic operations the format is as follows:
bits 8-15 : destination register
bits 16-23 : first source register
bits 24-31 : second source register


The list of arithmetic operations are as follows (assembler names are
surrounded by [])

0: add [add]
1: subtract [sub]
2: multiply [mul]
3: divide [div]
4: remainder (aka mod) [rem]
5: shift left [shl]
6: shift right [shr]
7: binary and [and]
8: binary or [or]
9: binary not (second source register isn't used, same form though) [not]
10: binary xor  [xor]
11: add immediate [addi]
12: subtract immediate [subi]
13: multiply immediate [muli]
14: divide immediate [divi]
15: remainder immediate [remi]
16: shift left immediate [shli]
17: shift right immediate [shri]
18-31 will cause a panic in the simulator as they are currently undefined

For the immediate forms the only difference is that bits 24-31 are not
interpreted as a register address. Instead it is interpreted as an 8-bit
number. Negative values are not supported so instead of doing:

   addi r0 r1 -1

you should do:

   subi r0 r1 1

-------------------------------------------------------------------

For move operations the general format is:

register-register form:

   bits 8-15 : register 0
   bits 16-23 : register 1
   bits 24-31 : unused
register-register-register form:
   bits 8-15 : register 0
   bits 16-23 : register 1 (lower 16-bits)
   bits 24-31 : register 2 (upper 16-bits)

register-immediate form

   bits 8-15 : register 0
   bits 16-31 : immediate

The list of move operations are as follows:

Move Register to Register (move)
Swap Registers (swap)
Set (set)
Load (register-register)
Load From Memory (ldm, register-immediate)
Load From Code (ldc, register-register-regsiter)
Store (st, register-register)
Store to Code (stc, register-register-register)
Memory Set (memset, register-immediate)
Push Register Contents onto Stack (push)
Push Immediate onto Stack (pushi)
Pop Value Off Stack and Store In Register (pop)

>>>>>> Move Register to Register
Assembly Command: move reg_dest reg_source
Description: Copies the contents of the source register into the destination
             register..

>>>>>> Swap Registers
Assembly Command: swap reg_dest reg_source
Description: Swaps the contents of the source register with the contents of the
             destination register.


>>>>>> Set Register With Immediate Value
Assembly Command: set reg_dest $immediate
Description: Sets the contents of the destination register to the supplied
             immediate value.

>>>>>> Load 
Assembly Command: ld reg_dest reg_src
Description: Sets the contents of the destination register to the contents of
             memory pointed at by the contents of the source register.

>>>>>> Load From Memory Using Immediate Value
Assembly Command: ldi reg_dest $immediate
Description: Sets the contents of the destination register to the contents of
             memory pointed at by the immediate.

>>>>>> Store
Assembly Command: st dest_reg source_reg
Description: Stores the contents of the source register into memory at the
             address contained in the destination register. 

>>>>>> Memory Set using Immediate Value and Register
Assembly Command: memset dest_reg $immediate
Description: Stores the contents of memory found at the address contained in
             the source register into memory at the address described in the
             destination register.

>>>>>> Push Register Contents onto Stack 
Assembly Command: push reg 
Description: Increments the contents of the implicit stack pointer register
             (default is r254) and stores the contents of reg at this address
             on the stack. The updated address is written to the stack pointer 
             at the end.

>>>>>> Push Immediate onto Stack 
Assembly Command: pushi $immediate 
Description: Increments the contents of the implicit stack pointer register
             (default is r254) and stores the immediate value at this address
             on the stack. The updated address is written to the stack pointer 
             at the end.

>>>>>> Pop Value Off Stack and Store In Register 
Assembly Command: pop reg 
Description: Saves the value at the top of the stack into reg, 
             decrements the stack pointer address, and then saves this updated
             stack pointer address back into the stack pointer.

-------------------------------------------------------------------
For Jump operations, we have three major groups:

- Unconditional
- Conditional True
- Conditional False
- IfThenElse

When dealing with immediate values, the jump operation is called a goto
When dealing with registers, the jump operation is called a jump.

>>>>>> Jump Unconditional Immediate 
Assembly Command: j $immediate
Description: Jumps to the target address
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Unused
   Byte 2-3 : immediate value, little endian

>>>>>> Jump Unconditional Immediate and Link
Assembly Command: jl dest_reg $immediate
Description: Jumps to the target address and stores the current address in the
             destination register.
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index to store current address in (useful for returns)
   Byte 2-3 : immediate value, little endian

>>>>>> Jump Unconditional Register 
Assembly Command: jr <addr_register>
Description: Jumps to the target address
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of register containing jump address
   Byte 2-3 : Unused

>>>>>> Jump Unconditional Register and Link
Assembly Command: jrl <linkregister> <addr_register>
Description: Jumps to the target address
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of Link Register
   Byte 2 : Index of Address Register
   Byte 3 : Unused

>>>>>> Jump Immediate If True
Assembly Command: jt $immediate
Description: Jumps to the target address provided that the given predicate
             register contains a value which is not zero
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of Predicate Register 
   Byte 2-3 : immediate value, little endian

>>>>>> Jump Immediate If True and Link
Assembly Command: jtl <link_register> $immediate
Description: Jumps to the target address provided that the contents of the
             predicate register (Index defined via implied register) is not
             zero. The current address is stored in the link_register. 
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index to store current address in (useful for returns)
   Byte 2-3 : immediate value, little endian

>>>>>> Jump Register If True 
Assembly Command: jrt <predicate_reg> <addr_register>
Description: Jumps to the target address provided the contents of the predicate
             register are not zero.
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of the Predicate Register
   Byte 2 : Index of the Address Register
   Byte 3 : Unused

>>>>>> Jump Register If True and Link
Assembly Command: jrtl <predicate> <addr> <link>
Description: Jumps to the target address provided the contents of the predicate
             are not zero and saves the current location to the provided link 
             register.
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of Predicate Register
   Byte 2 : Index of Address Register
   Byte 3 : Index of Link Register 

>>>>>> Jump Immediate If False
Assembly Command: jf $immediate
Description: Jumps to the target address provided that the given predicate
             register contains a value which is zero
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of Predicate Register 
   Byte 2-3 : immediate value, little endian

>>>>>> Jump Immediate If False and Link
Assembly Command: jfl <link_register> $immediate
Description: Jumps to the target address provided that the contents of the
             predicate register (Index defined via implied register) is zero. 
             The current address is stored in the link_register. 
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index to store current address in (useful for returns)
   Byte 2-3 : immediate value, little endian

>>>>>> Jump Register If False
Assembly Command: jrf <predicate_reg> <addr_register>
Description: Jumps to the target address provided the contents of the predicate
             register are zero.
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of the Predicate Register
   Byte 2 : Index of the Address Register
   Byte 3 : Unused

>>>>>> Jump Register If False and Link
Assembly Command: jrfl <predicate> <addr> <link>
Description: Jumps to the target address provided the contents of the predicate
             are zero and saves the current location to the provided link 
             register.
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of Predicate Register
   Byte 2 : Index of Address Register
   Byte 3 : Index of Link Register 

>>>>>> If True Then Else 
Assembly Command: ift <predicate> <ontrue> <onfalse> 
Description: If the contents of the predicate register are not zero then jump
             to the address contained in the ontrue register else jump to the
             on false register
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of Predicate Register 
   Byte 2 : Index of On True Register
   Byte 3 : Index of On False Register

>>>>>> If False Then Else 
Assembly Command: iff <predicate> <ontrue> <onfalse> 
Description: If the contents of the predicate register are zero then jump to 
             the address contained in the ontrue register else jump to the
             on false register
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of Predicate Register 
   Byte 2 : Index of On True Register
   Byte 3 : Index of On False Register

>>>>>> If True Then Else and Link
Assembly Command: iftl <link_register> <ontrue> <onfalse> 
Description: If the contents of the predicate register are not zero (implied
             register) then jump to the address contained in the ontrue 
             register else jump to the on false register and save the current
             location to the link register
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of Link Register 
   Byte 2 : Index of On True Register
   Byte 3 : Index of On False Register

>>>>>> If False Then Else and Link
Assembly Command: iffl <link_register> <ontrue> <onfalse> 
Description: If the contents of the predicate register (implied register) are 
             zero then jump to the address contained in the ontrue register 
             else jump to the on false register and save the current location 
Layout:
   Byte 0 : Group + Opcode
   Byte 1 : Index of Link Register 
   Byte 2 : Index of On True Register
   Byte 3 : Index of On False Register

-------------------------------------------------------------------
For condition operations the form is as follows:

byte 0 : Group + Op (3 + 5 bits)
byte 1 : Destination Register
byte 2 : Source Register 0
byte 3 : Source Register 1

>>>>>> Equals 
Assembly Command: eq <dest> <src0> <src1> 
Description: Checks to see if the contents of src0 == src1 and stores the
             result in dest

>>>>>> Not Equals 
Assembly Command: ne <dest> <src0> <src1> 
Description: Checks to see if the contents of src0 != src1 and stores the
             result in dest

>>>>>> Less Than 
Assembly Command: lt <dest> <src0> <src1> 
Description: Checks to see if the contents of src0 < src1 and stores the
             result in dest

>>>>>> Greater Than 
Assembly Command: gt <dest> <src0> <src1> 
Description: Checks to see if the contents of src0 > src1 and stores the
             result in dest

>>>>>> Less Than Or Equal To 
Assembly Command: le <dest> <src0> <src1> 
Description: Checks to see if the contents of src0 <= src1 and stores the
             result in dest

>>>>>> Greater Than Or Equal To 
Assembly Command: ge <dest> <src0> <src1> 
Description: Checks to see if the contents of src0 >= src1 and stores the
             result in dest

>>>>>> Equals Immediate
Assembly Command: eqi <dest> <src0> $imm8
Description: Checks to see if the contents of src0 == $imm8 and stores the
             result in dest

>>>>>> Not Equals Immediate
Assembly Command: ne <dest> <src0> $imm8
Description: Checks to see if the contents of src0 != $imm8 and stores the
             result in dest

>>>>>> Less Than Immediate
Assembly Command: lti <dest> <src0> $imm8
Description: Checks to see if the contents of src0 < $imm8 and stores the
             result in dest

>>>>>> Greater Than Immediate
Assembly Command: gti <dest> <src0> $imm8
Description: Checks to see if the contents of src0 > $imm8 and stores the
             result in dest

>>>>>> Less Than Or Equal To Immediate
Assembly Command: lei <dest> <src0> $imm8
Description: Checks to see if the contents of src0 <= $imm8 and stores the
             result in dest

>>>>>> Greater Than Or Equal To Immediate
Assembly Command: gei <dest> <src0> $imm8
Description: Checks to see if the contents of src0 >= $imm8 and stores the
             result in dest

---------------------------------------------------------------------
The misc op group has the following operations:

>>>>>> System Call
Opcode: 0
Assembly Command: system $<operation> <reg> <reg> 
Description: Performs a system call which taps into system calls described by
             the simulator (at this point there is no trap handler nor trap 
             instructions). Takes in an index and two registers used as
             arguments.
Layout:
   byte 1: System operation index (0-255), immediate value
   byte 2: Index of first input register
   byte 3: Index of second input register

System Operations (this list may not always be up to date, see source to make
                   sure)
   1) Halt - Terminates the simulator or system
   2) getc - Gets a character from standard input and stores the result in reg0 
   3) putc - prints the character stored in reg0 to standard out 
   4) panic - crashes the simulator and provides a core dump
   5-255) Undefined


>>>>>> Set Implicit Register Immediate
Opcode: 1
Assembly Command: implicit.register.set $<index> <reg> 
Description: Sets the target register to use implicitly for operations which
             require more operands than allowed in the actual encoding space.
             The lower 8-bits of the register's contents are stored in the 
             byte register at the provided immediate index. Keep in mind that
             one could use implicit register offsets as extra storage but be
             aware that unused implicit registers may become used in later
             implementations of the iris core.

Layout:
   byte 1: Implicit register index 
   byte 2: Index of register
   byte 3: Unused

>>>>>> Set Implicit Register Indirect 
Opcode: 2
Assembly Command: implicit.register.indirect.set <index_reg> <value_reg> 
Description: Sets the target register to use implicitly for operations which
             require more operands than allowed in the actual encoding space.
             The lower 8-bits of the register's contents are stored in the 
             implicit byte register at the index located in the lower 8-bits of
             the index register. Keep in mind that one could use implicit 
             register offsets as extra storage but be aware that unused 
             implicit registers may become used in later implementations of the 
             iris core.

Layout:
   byte 1: index register (lower 8-bits)
   byte 2: value register (lower 8-bits)
   byte 3: Unused

>>>>>> Get Implicit Register Immediate
Opcode: 3
Assembly Command: implicit.register.get <reg> $<index> 
Description: Retrieves the value stored in the given implicit register 
             described by the immediate index and stores it in the provided
             register. Keep in mind, that this information is useful if you
             want to temporary swap implicit register targets.

Layout:
   byte 1: Register to store contents of indirect register in
   byte 2: Immediate indirect register index
   byte 3: Unused

>>>>>> Get Implicit Register Indirect 
Opcode: 4
Assembly Command: implicit.register.indirect.get <value_reg> <index_reg>
Description: Retrieves the value stored in the given implicit register 
             described by the lower 8-bits of the provided value register 
             and stores it in the value register. Keep in mind, that this 
             information is useful if you want to temporary swap implicit
             register targets.

Layout:
   byte 1: value register (lower 8-bits)
   byte 2: index register (lower 8-bits)
   byte 3: Unused


