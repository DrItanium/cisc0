This is a basic idea of how an iris cpu would be able to reference it's
different memory spaces in a single layout. All addresses are 16-bit based
instead of 8-bit

0x00000-0x1FFFF : Code Section (2 words per instruction)
0x20000-0x2FFFF : Data Section
0x30000-0x3FFFF : Stack Section
0x40000-0x4FFFF : IO Section
0x50000-0xFFFFF : Unmapped

If we add the GPU into the mix then we need to add the following:

0x50000-0x5FFFF : GPU Memory (R, G, B, I) [bit plane overlay mode]
0x60000-0xFFFFF : Unmapped



| Mode ID | Pixels Per Word Per Plain | Lookup entries | Single Screen Max Resolution | Title |
| 0 | 16 | 16 | 1024 x 1024 | High Resolution Mode |
| 1 | 8 | 256 | 1024 x 512 | 256 Resolution Mode |
| 2 | 4 | 64k | 512 x 512 | 64k Color Mode |
| 3 | 2 | 4 Billion | 512 x 256 | 32-bit color Mode |
| 4 | 1 | 2^64 | 256 x 256 | Absolute color mode |


Cores for the GPU, each operates in parallel

R (iris)
G (iris)
B (iris)
I (iris)



IO Space Memory Map
-------------------
0x0000 - Terminate execution (write)
0x0001 - Get Character from Input (read)
0x0002 - Put Character to Display(write)
0x0003 - Seed Random Number Generator (write)
0x0004 - Get Random Number (read)
0x0005 - Discard N results from random number generator (write)

