The iris core is a simple 8-bit processor which has 16-bit instructions.

Some stats:

- 8 general purpose 8-bit registers
- CISC design (with influence taken from itanium, x86, and RISC designs)
- Instructions are fixed at 16-bits in length
- 64k of memory
- Simple decoder logic
- Easy to extend due to 4 unused execution groups



The general format of the instructions are as follows:

bits 13-15 : operation group [3 bits]
bits 0-12 : operation bits [13 bits]

Iris has support for up to eight instruction groups where only four are
actually in use. The four modes are:

0: Arithmetic
1: Move
2: Jump
3: Compare
4-7: Undefined (will cause a panic in the simulator at this point in time)

The operation bits are different for each major operation group. 

-------------------------------------------------------------------

For arithmetic operations the format is as follows:

bits 9-12 : specific operation
bits 6-8 : destination register
bits 3-5 : first source register
bits 0-2 : second source register

The list of arithmetic operations are as follows:

0 add
1 subtract
2 multiply 
3 divide
4 remainder (aka mod)
5 shift left
6 shift right
7 binary and
8 binary or
9 binary not (second source register isn't used, same form though)
10 binary xor
11-15 will cause a panic in the simulator as they are currently undefined

-------------------------------------------------------------------

For move operations the general format is:

bits 11-12 : specific operation
bits 8-10 : first register (source or destination dependent on mode)
bits 0-7 : mode specific bits

There are a potential four different modes for a move operation in the iris
core.

0: Register to Register 
1: Immediate to Register 
2: Register to Address (has load and store functionality)
3: Undefined (will cause a panic in the simulator if used)

>>>>>> Register to Register mode
In the register to register mode the remaining bits are as follows:

bits 5-7 : second register
bits 0-4  : unused

In this mode the first register is the destination and the second register
source.

>>>>>> Immediate to Register mode
In this mode the remaining bits are as follows:

bits 0-7 : immediate value

this immediate value is written to the first register

>>>>>> Register to Address mode [Load/Store]
In this mode the remaining bits are as follows:

bits 5-7 : second register [lower half]
bits 2-4 : third register [upper half]
bit 1 : access mode [load or store]
bit 0 : unused

In this mode the second and third register are used to create a 16-bit absolute
address. This address is used different depending on access mode where:

0 : Load 
1 : Store

In load mode, the contents of the computed address are saved into the first
register. In store mode, the contents of the first register are saved into
memory at the computed address. The 16-bit address is built as follows:

0-7 : contents of second register
8-15 : contents of third register

The move instruction is a very important instruction which provides load and
store functionality depending on mode bits set. It is impossible for both to
occur at the same time.

-------------------------------------------------------------------


