; Routine for printing the contents of a register!
@code

@label PRINT_CODE_AS_HEX
    savelr(sp)
	push sp arg0				; save arg0 to the stack since it is the lower half
	move arg0 arg1				; arg1 is now arg0 since it is the upper half, needs to be printed first
	bil PRINT_REGISTER_AS_HEX ; Perform the print
	pop arg0 sp				; restore arg0
	bil PRINT_REGISTER_AS_HEX ; printout the lower half
    restorelr(sp)
	ret

@label TRANSLATE_LOWER4_TO_HEX
	; translate the lower 4 bits of the register
    andiw(arg0, arg0, 0x000F)
    addiw(arg0, arg0, HEX_PRINT_TRANSLATION_TABLE)
	ld return0 arg0
	ret

@label PRINT_REGISTER_AS_HEX 
    savelr(sp)
	push sp temp0
	push sp temp1
	push sp temp2
	push sp temp3
	shri temp0 arg0 12
	shri temp1 arg0 8
	shri temp2 arg0 4
	move temp3 arg0
	; now do the other stuffs
	move arg0 temp0
	bil PRINT_HEX_CHARACTER_FROM_LOWER4
	move arg0 temp1
	bil PRINT_HEX_CHARACTER_FROM_LOWER4
	move arg0 temp2
	bil PRINT_HEX_CHARACTER_FROM_LOWER4
	move arg0 temp3
	bil PRINT_HEX_CHARACTER_FROM_LOWER4
	pop temp3 sp
	pop temp2 sp
	pop temp1 sp
	pop temp0 sp
    restorelr(sp)
	ret

@label PRINT_HEX_CHARACTER_FROM_LOWER4
    savelr(sp)
	bil TRANSLATE_LOWER4_TO_HEX
    restorelr(sp)
	move arg0 return0
	bi PRINT_CHARACTER
@label PRINT_NEWLINE
	set arg0 0xa
	bi PRINT_CHARACTER
@label PRINT_CHARACTER
	set arg1 0x0002
	bi IO_WRITE
@label TERMINATE_EXECUTION
	set arg1 0x0000
	bi IO_WRITE
@label READ_CHARACTER
	set arg0 0x0003
	bi IO_READ
@label HEX_CHAR_TO_NUMBER
	; convert a given value to binary hex
    andiw(arg0, arg0, 0x00FF) ; make sure we're not overflowed
    addiw(arg0, arg0, HEX_PRINT_TRANSLATION_TABLE)
	ld return0 arg0			; Load the corresponding offset from memory
	ret


	
@data
; in the last page, first section, we have the ascii table
@org 0xF100
	@label HEX_PRINT_TRANSLATION_TABLE
	@declare 0x30
	@declare 0x31
	@declare 0x32
	@declare 0x33
	@declare 0x34
	@declare 0x35
	@declare 0x36
	@declare 0x37
	@declare 0x38
	@declare 0x39
	@declare 0x41
	@declare 0x42
	@declare 0x43
	@declare 0x44
	@declare 0x45
	@declare 0x46
	; 0xF110
@org 0xF130
	@declare 0x0
	@declare 0x1
	@declare 0x2
	@declare 0x3
	@declare 0x4
	@declare 0x5
	@declare 0x6
	@declare 0x7
	@declare 0x8
	@declare 0x9
@org 0xF141
	@declare 0xA
	@declare 0xB
	@declare 0xC
	@declare 0xD
	@declare 0xE
	@declare 0xF
