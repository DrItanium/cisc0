;-----------------------------------------------------------------------------
;  stack-machine ucode
;  Copyright (c) 2013-2015, Joshua Scoggins and Contributors
;  All rights reserved.
;  
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions are met:
;      * Redistributions of source code must retain the above copyright
;        notice, this list of conditions and the following disclaimer.
;      * Redistributions in binary form must reproduce the above copyright
;        notice, this list of conditions and the following disclaimer in the
;        documentation and/or other materials provided with the distribution.
;  
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR 
;  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;-----------------------------------------------------------------------------
; Implementation of a stack machine using iris as a microcoded processor
;-----------------------------------------------------------------------------
; Setup initial register state
;-----------------------------------------------------------------------------
set r225 0								; Hardcoded zero
set r226 1								; Hardcoded one
set r227 0xffff 							; Max
set r228 0x0000					   		; Min
set r229 2								; Hardcoded two
set r230 3								; Hardcoded three

set r0 0								; machine program counter
set r1 0								; parameter stack top
set r2 0								; parameter stack second
set r3 0								; parameter stack third
set r4 parameterstackbase				; address of the parameter stack
set r5 0							    ; stack length
										; use the internal stack for the return stack
										; registers 32-64 are return registers
										; registers 64-128 are argument registers
										; registers 128-192 are local registers
										; registers 193-224 are global registers
										; register 253 is the link register
										; register 252 is the indirect address register
										; register 251 is a temporary register
goto ucode_start						; At the end of register setup, we need to jump
										; to ucode start

;-----------------------------------------------------------------------------
; ucode_push_parameter: push a value onto the parameter stack
; r64 - value
;-----------------------------------------------------------------------------
@label ucode_push_parameter
	ge r128 r5 r230 								; check and see if we have three or more elements on the stack already
	goto.if1 r128 ucode_push_parameter_into_memory
	eq r129 r5 r229									; we don't so check and see if it has two elements
	goto.if1 r129 ucode_shift_second_to_third
	set r130 ucode_shift_first_to_second
	set r131 ucode_push_parameter_set_top
	if1 r5 r130 r131								; at this point the stack length is either one or zero,
													; so save an instruction and use if then else form
@label ucode_push_parameter_into_memory
	addi r4 r4 1									; update the address
	store r4 r3							    		; push the third element into memory
@label ucode_shift_second_to_third
	move r3 r2										; move the second to third
@label ucode_shift_first_to_second				
	move r2 r1										; move the first to second
@label ucode_push_parameter_set_top
	move r1 r64
	addi r5 r5 1								; increment the stack length
	goto ucode_internal_return

;-----------------------------------------------------------------------------
; ucode_pop_parameter: pop a value off the parameter stack and return it
; r32 - value to return
;-----------------------------------------------------------------------------
@label ucode_pop_parameter
	goto.if0 r5 ucode_no_elements
	move r32 r1										; we have elements so just save the top of the stack to the return register
	gt r128 r5 r230 								; check and see if we have three or more elements on the stack already
	goto.if1 r128 ucode_pop_more_than_three_elements
	eq r128 r5 r230
	goto.if1 r128 ucode_pop_three_elements
	eq r128 r5 r229									; we don't so check and see if it has two elements
	set r129 ucode_pop_two_elements
	set r130 ucode_pop_one_element
	if1 r128 r129 r130
@label ucode_pop_more_than_three_elements
	move r1 r2
	move r2 r3
	load r3 r4
	subi r4 r4 1
	goto ucode_pop_parameter_done
@label ucode_pop_three_elements
	move r1 r2
	move r2 r3
	move r3 r228
	goto ucode_pop_decrement
@label ucode_pop_two_elements
	move r1 r2
	move r2 r228
	goto ucode_pop_decrement
@label ucode_pop_one_element
	move r1 r228
@label ucode_pop_decrement
	subi r4 r4 1
	goto ucode_pop_parameter_done
@label ucode_no_elements
	move r32 r227
@label ucode_pop_parameter_done
	goto ucode_internal_return


;-----------------------------------------------------------------------------
; ucode_start: entry-point for all ucode routines, always the bottom of the
; environment
;-----------------------------------------------------------------------------
@label ucode_start
@label ucode_loop_top

goto ucode_loop_top
@label ucode_loop_done
system 0 r0 r0 					; We should never ever get here

;-----------------------------------------------------------------------------
; ucode_internal_call: push the link register onto the internal stack and then
; jump to the address in the first argument
; r253 - link register
; r252 - destination
;-----------------------------------------------------------------------------
@label ucode_internal_call
push r253
jump r252

;-----------------------------------------------------------------------------
; ucode_internal_return: pop the top address off of the internal stack and 
; jump to it
;-----------------------------------------------------------------------------
@label ucode_internal_return
pop r251
jump r251



; data sections
@data
@label parameterstackbase
@declare 0xFFFF
