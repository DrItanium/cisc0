; Core iris17 stack machine routines
; r9 is the exposed first argument
; r8 is the exposed second argument
; r7 is the exposed third argument
; r6 is the exposed fourth argument
; r0 is the instruction pointer
; r1 is the data stack pointer
; r2 is the call stack pointer
; r3 is a temporary
; r4 is a temporary
; r5 is a temporary
@startup sp 0x00FF0000
@startup ip 0x00000100
@org 0x00000000
@label dataStackAddress
    @dword DATA_STACK_START
@label dcodeStackAddress
    @dword CODE_STACK_ADDRESS


@org 0x00000100

@label next-instruction
    arithmetic add immediate r0 0x4     ; increment by two
    move 0m1111 addr r0                 ; setup for a new load
    memory load 0m0011 0x0              ; load the value
    move 0m1111 r3 value                ; save the control bits
    memory load 0m1111 0x1              ; access the 32-bit value following it

    move 0m1000 r3 value                ; Check the upper 8 bits of the address
    move 0m0111 r4 value                ; load the actual


    move 0m1111 ip r5                   ; set ip to that value!
@label push-data
    swap sp r1                          ; swap sp and r1 so that r1 is the stack pointer
    memory push 0m1111 r9               ; store the first argument onto the data stack
    swap sp r1                          ; restore the old stack pointer
    branch immediate next-instruction   ; call the next instruction
@label pop-data
    swap sp r1
    memory pop 0m1111 r9                ; pop the top of the stack off into r9
    swap sp r1
    branch immediate next-instruction
@label push-operation
    swap sp r2
    memory push 0m1111 r9
    swap sp r2
    branch immediate next-instruction
@label pop-operation
    swap sp r2
    memory pop 0m1111 r9
    swap sp r2
    branch immediate next-instruction



@label ADD
    arithmetic add r9 r8
    branch immediate next-instruction
@label SUB
    arithmetic sub r9 r8
    branch immediate next-instruction
@label MUL
    arithmetic mul r9 r8
    branch immediate next-instruction
@label DIV
    arithmetic div r9 r8
    branch immediate next-instruction
@label REM
    arithmetic rem r9 r8
    branch immediate next-instruction
@label PUSH
    memory push 0m1111 r9
    branch immediate next-instruction
@label POP
    memory pop 0m1111 r9
    branch immediate next-instruction
@label INCREMENT
    arithmetic add immediate r9 0x1
    branch immediate next-instruction
@label DECREMENT
    arithmetic sub immediate r9 0x1
    branch immediate next-instruction
@label DOUBLE
    arithmetic mul immediate r9 0x2
    branch immediate next-instruction
@label HALVE
    arithmetic div immediate r9 0x2
    branch immediate next-instruction
@label STORE
    move 0m1111 addr r9
    move 0m1111 value r8
    memory store 0m1111 0x0
    branch immediate next-instruction
@label LOAD
    move 0m1111 addr r9
    memory load 0m1111 0x0
    move 0m1111 r9 value
    branch immediate next-instruction
@label AND
    logical and r9 r8
    return
@label OR
    logical or r9 r8
    return
@label NOT
    logical not r9
    return
@label XOR
    logical xor r9 r8
    return
@label NAND
    logical nand r9 r8
    return
@label LEFT_SHIFT
    shift left r9 r8
    return
@label RIGHT_SHIFT
    shift right r9 r8
    return

@label DECODE_WORD
    memory pop 0m1111 r9
    memory pop 0m1111 r8
    memory pop 0m1111 r7
    memory push 0m1111 lr
    branch call immediate AND
    swap r8 r7
    memory pop 0m1111 lr
    branch immediate RIGHT_SHIFT

@label ENCODE_WORD_FUNCTIONS
    @dword NOT
    @dword AND
    @dword LEFT_SHIFT
    @dword OR

@label NEXT_FUNCTION
    arithmetic add immediate address 0x2
    branch immediate CALL

@label ARGS4
    memory pop 0m1111 r6
@label ARGS3
    memory pop 0m1111 r7
@label ARGS2
    memory pop 0m1111 r8
@label ARGS1
    memory pop 0m1111 r9
    return



@label ENCODE_WORD
    ; args
    memory push 0m1111 lr
    swap r0 sp
    branch call immediate ARGS4
    swap r0 sp
    swap r9 r8
    set 0m1111 address ENCODE_WORD_FUNCTIONS
    branch call immediate NEXT_FUNCTION
    swap r9 r8
    branch call immediate NEXT_FUNCTION
    swap r8 r6
    swap r7 r9
    branch call immediate NEXT_FUNCTION
    memory pop 0m1111 lr
    move 0m1111 r8 r7
    branch call immediate NEXT_FUNCTION
    return

@label EQ
    compare == none r9 r8
    return

@label IF_THEN_ELSE
    branch if r9 r8

@label IF_THEN_ELSE_CALL
    set 0m1111 address IF_THEN_ELSE
    branch immediate CALL

@label IS_LPAREN
    set 0m0001 r8 0x28
    branch immediate EQ

@label IS_RPAREN
    set 0m0001 r8 0x29
    branch immediate EQ

@label IS_SPACE
    set 0m0001 r8 0x20
    branch immediate EQ

@label IS_SEMICOLON
    set 0m0001 r8 0x3b
    branch immediate EQ

@label IS_NEWLINE
    set 0m0001 r8 0x0a
    branch immediate EQ

@label IS_NULL
    set 0m0000 r8 0x0
    branch immediate EQ

@label ZERO
    set 0m0000 r9 0x0
    return
@label RETURN
    return
@label CALL
    branch address

@org 0x00FE0000
@label CALL_STACK_START
@org 0x00FE7FFF
@label CALL_STACK_END
@org 0x00FE8000
@label DATA_STACK_START
@org 0x00FEFFFF
@label DATA_STACK_END
