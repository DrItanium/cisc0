// A raw instruction is actually a 64-bit pa
//
// Enum Title, Mask, Shift amount, field type, post_fix
// define X(title, mask, shift, type, is_register, post, wordOffset)
X(Control,              0b00000000000000000000000000000111, 0, Operation,  control)
X(ImmediateFlag,        0b00000000000000000000000000001000, 3, bool, immediateFlag)
// defaults to cut down on special cases
X(DestinationIndex,     0b00000000000000001111111100000000, 8, byte, destinationIndex)
X(Source0Index,         0b00000000111111110000000000000000, 16, byte, source0Index)
X(Source1Index,         0b11111111000000000000000000000000, 24, byte, source1Index)
X(ShortImmediate,       0b11111111000000000000000000000000, 24, RegisterValue, shortImmediate)
X(RawBitmask,       	0b11111111000000000000000000000000, 24, byte, rawBitmask)

// Conditional instruction flags
X(CompareType,   		            0b00000000000000000000000001110000, 4,  byte,  compareStyle)

// arithmetic flags
X(ArithmeticFlagType,               0b00000000000000000000000001110000, 4, byte,  arithmeticFlagType)

// Logical Flags
X(LogicalFlagType,                  0b00000000000000000000000001110000, 4, byte,  logicalFlagType)

// Shift Operation
X(ShiftFlagLeft,                    0b00000000000000000000000000010000, 4, bool,  shiftFlagLeft)

// branch flags
X(BranchFlagIsConditional,		   0b00000000000000000000000001000000,  6, bool, branchFlagIsConditional)
X(BranchFlagIsIfForm,              0b00000000000000000000000000100000,  5, bool, branchFlagIsIfForm)
X(BranchFlagIsCallForm,            0b00000000000000000000000000010000,  4, bool, branchFlagIsCallForm)

// move operation flags: move, set, swap
X(MoveSubtype,            0b00000000000000000000000000110000, 4, byte, moveSubtype)

