(defclass MAIN::output-file
  (is-a USER)
  (multislot enum-entries)
  (multislot arg-counts)
  (multislot translations))
(deffacts MAIN::memory-block-operations
          (translation populate -> Populate)
          (translation type -> Type)
          (translation size -> Size)
          (translation get read load -> Get)
          (translation set write store -> Set)
          (translation clear zero -> Clear)
          (translation increment ++ -> Increment)
          (translation decrement -- -> Decrement)
          (translation swap -> Swap)
          (translation move copy -> Move)
          (translation add combine + -> Combine)
          (translation sub subtract difference - -> Difference)
          (translation mul multiply product * -> Product)
          (translation div divide / -> Divide)
          (translation rem remainder mod % -> Remainder)
          (translation eq equals == -> Equals)
          (translation neq not-equals != <> -> NotEquals)
          (translation lt less-than < -> LessThan)
          (translation gt greater-than > -> GreaterThan)
          (translation lte less-than-or-equal-to <= -> LessThanOrEqualTo)
          (translation gte greater-than-or-equal-to >= -> GreaterThanOrEqualTo)
          (translation initialize -> Initialize)
          (translation shutdown -> Shutdown)
          (defarg-count 0
                        Clear
                        Type
                        Size
                        Initialize
                        Shutdown)
          (defarg-count  2
                         Combine
                         Difference
                         Product
                         Divide
                         Remainder
                         Equals
                         NotEquals
                         LessThan
                         GreaterThan
                         LessThanOrEqualTo
                         GreaterThanOrEqualTo
                         Swap
                         Move
                         Set)
          (defarg-count 1
                        Populate
                        Get
                        Increment
                        Decrement))


(definstances MAIN::output-files
              (of output-file))
(defrule MAIN::generate-arg-count-entries
         (declare (salience 10))
         ?f <- (defarg-count ?count
                             $?types)
         =>
         (retract ?f)
         (progn$ (?t ?types)
                 (assert (count ?t -> ?count))))
(deffunction MAIN::make-translation-entry
             (?title ?enum ?count)
             (format nil
                     "{ \"%s\", std::make_tuple(MemoryBlockOp:: %s , %d) },"
                     ?title
                     ?enum
                     ?count))
(defrule MAIN::process-translation
         (declare (salience 2))
         ?f <- (translation ?first $?rest -> ?enum)
         ?f2 <- (count ?enum -> ?count)
         =>
         (retract ?f ?f2)
         (assert (enum-entry (str-cat ?enum ,))
                 (translation-entry (make-translation-entry ?first
                                                            ?enum
                                                            ?count)))
         (progn$ (?title ?rest)
                 (assert (translation-entry (make-translation-entry ?title
                                                                    ?enum
                                                                    ?count)))))

(defrule MAIN::implant-arg-count-entry
         (declare (salience 1))
         ?f <- (arg-count-entry ?str)
         ?q <- (object (is-a output-file)
                       (arg-counts $?ac))
         =>
         (retract ?f)
         (modify-instance ?q
                          (arg-counts ?ac
                                      ?str)))
(defrule MAIN::implant-enum-entry
         (declare (salience 1))
         ?f <- (enum-entry ?msg)
         ?q <- (object (is-a output-file)
                       (enum-entries $?ee))
         =>
         (retract ?f)
         (modify-instance ?q
                          (enum-entries $?ee ?msg)))

(defrule MAIN::implant-translation
         (declare (salience 1))
         ?f <- (translation-entry ?msg)
         ?q <- (object (is-a output-file)
                       (translations $?ee))
         =>
         (retract ?f)
         (modify-instance ?q
                          (translations $?ee ?msg)))

(defrule MAIN::generate-final-output
         (object (is-a output-file)
                 (enum-entries $?ee)
                 (translations $?tt)
                 (arg-counts $?ac))
         =>
         (printout t "// THIS IS AUTOGENERATED CODE! DO NOT MODIFY!" crlf)
         (printout t "enum class MemoryBlockOp {" crlf)
         (progn$ (?e $?ee)
                 (printout t ?e crlf))
         (printout t "};" crlf)
         (printout t "static std::map<std::string, std::tuple<MemoryBlockOp, int>> opTranslation = {" crlf)
         (progn$ (?t ?tt)
                 (printout t ?t crlf))
         (printout t "};" crlf))


